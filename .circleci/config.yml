version: 2.1

orbs: 
  aws-cli: circleci/aws-cli@3.1.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-id --recursive   
            aws cloudformation delete-stack --stack-name udapeople-backend-id
            aws cloudformation delete-stack --stack-name udapeople-frontend-id
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: .env
          command: |
            pwd
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            cat .env
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCESS=$(curl -k https://kvdb.io/4KLD8geH4W1m4rQhB1fkdQ/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
    - image: cimg/node:18.4.0
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
    - image: cimg/node:18.4.0
    steps:
    - checkout
    - restore_cache: 
        keys: [frontend-test]
    - run:
        name: front-end test
        command: |
          cd frontend
          npm install
          npm run test
    - save_cache:
        paths: [frontend/test]
        key: frontend-test
                
  test-backend:
    docker:
    - image: cimg/node:18.4.0
    resource_class: medium
    steps:
    - checkout
    - restore_cache: 
        keys: [backend-test]
    - run:
        name: back-end test
        command: |
          cd backend
          npm install
          npm run test
    - save_cache:
        paths: [backend/test]
        key: backend-test
            
  scan-frontend:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
    - checkout
    - restore_cache: 
        keys: [frontend-scan]
    - run:
        name: front-end scan
        command: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
    - save_cache:
        paths: [frontend/scan]
        key: frontend-scan

  scan-backend:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
    - checkout
    - restore_cache: 
        keys: [backend-scan]
    - run:
        name: back-end scan
        command: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
    - save_cache:
        paths: [backend/scan]
        key: backend-scan

  deploy-infrastructure:
    docker:
    -  image: amazon/aws-cli
    resource_class: medium
    steps:
      - checkout
      - run:
          name: tar
          command: |
            yum -y install tar gzip
      - run:
          name: deploy back-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-id \
              --parameter-overrides ID="id" \
              --tags project=udapeople
      - run:
          name: deploy front-end infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-id \
              --parameter-overrides ID="id" \
              --tags project=udapeople      
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-id" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment   
  
  configure-infrastructure:
    docker:
    - image: python:3.11-rc-alpine
    resource_class: medium
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c2:35:78:49:b6:bb:99:b2:2f:b1:88:34:c6:1b:6b:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
   
      - destroy-environment

  run-migrations:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: install npm
          command: |
            cd backend
            npm install
      - run:
          name: .env
          command: |
            pwd
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            cat .env
      - run:
          name: run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            curl -k https://kvdb.io/4KLD8geH4W1m4rQhB1fkdQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/4KLD8geH4W1m4rQhB1fkdQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/          
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -vczf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-id --recursive
      - destroy-environment

  deploy-backend:
    docker:
    - image: python:3.11-rc-alpine
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["c2:35:78:49:b6:bb:99:b2:2f:b1:88:34:c6:1b:6b:ca"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl
            apk add --update nodejs
            apk add --update tar gzip
            apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -vczf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

  smoke-test:
    docker:
    - image: circleci/node:13.8.0
    resource_class: medium
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update npm
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name, Values=backend-id" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
            if curl -ks "${API_URL}/api/status" | grep "ok"
              then
                return 0
              else
                return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html#/employees"
            echo ${URL}
            if curl -sk ${URL} | grep "Welcome"
              then
                return 1
              else
                return 1
              fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
    -  image: amazon/aws-cli
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name UdapeopleInitial \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
    -  image: amazon/aws-cli
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "inside if condition"
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      

workflows:
  Udapeople:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
          #requires: [build-frontend]
      #- test-backend:
          #requires: [build-backend]
      #- scan-backend:
          #requires: [build-backend]
      #- scan-frontend:
          #requires: [build-frontend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      - smoke-test:
          #requires: [deploy-backend, deploy-frontend]

